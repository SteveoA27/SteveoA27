Overview

These scripts demonstrate various operations (e.g., arithmetic evaluation, user login) but contain significant vulnerabilities due to improper handling of user inputs and reliance on unsafe functions like eval(). These issues can be exploited to execute arbitrary code or inject malicious payloads, leading to potential system compromises.

Key Components

1. example.py
Purpose: Reads input from a file or console and executes the provided code using eval().
Vulnerability: Directly executes user input through eval().
It will be executed if example.txt contains malicious input (e.g., os.system('rm -rf /')).
Exploit Example: Writing hack() in example.txt triggers the predefined hack function in vulnerability.py.

2. hack1.py
Purpose: Evaluate arithmetic expressions read from a file (hack1.txt) or user input.
Vulnerability: Uses eval() to process user-provided expressions without validation.
If hack1.txt contains malicious input, such as hack(), it triggers the hack function in vulnerability.py.
Exploit Example: The input hack() # + "" ensures hack() is executed while bypassing input validation attempts.

3. hack2.py
Purpose: Reads a number from a file (hack2.txt) or console and adds 1 to it.
Vulnerability: Uses eval() to process input.

4. hack3.py
Purpose: Simulates a login function by checking usernames against a predefined list.
Vulnerability:
Uses eval() to execute user input concatenated with the login function.
Input like ') + hack() # manipulates the function call to execute the hack function.
Exploit Example: Writing ') + hack() # in hack3.txt injects the hack function call.
  
5. vulnerability.py
Purpose: Contains a simple function hack() that returns a predefined message from one of the previous .py files.
Injection via Files: Inputs are often read from files (example.txt, hack1.txt, etc.) that can be manipulated to contain malicious payloads.
Injection via Console Input: The scripts prompt for user inputs that are directly passed to eval().

